;Disclaimer:
;(1)The above changes are based on discussion with SUNY Oswego team for the purpose of creating
;a user-friendly website to generate GW parameters from the hodograph method (traditional). It is NOWHERE
;intended for more advanced users who might want to try different methods/height segment/background removal,etc.
;(2)There is no uncertainty quantification associated with this current hodograph method application. In
;other words, it is assumed the sounding has zero measurement error, and the method is "perfect" at removing background
;and there's a dominant GW packet in the sounding profile. In practice, these assumptions apparently have
;flaws, and we ignore these flaws for the purpose of making it user-friendly to users with rudimentary needs.
;It is NOT suitable for advanced needs.
;(3)Using cold-point to determine tropopause is not ideal. However, this code is not designed for
;detecting tropopause by any means. It's for the purpose to exclude sharp gradient from tropopause layer structure that
;can bias GW results. Therefore, we choose the easiest definition to implement in coding rather than the
;most strict ones. Again, please use with caution with the "cold-point tropoapuse height" output.
;(4)Please cite one of the following references if you use results generated by this codes/platform for
; scientific publications:
;Jie Gong (2009):Characteristics of Two Gravity Wave Sources in the US High Vertical-resolution Radiosonde Data,PhD. thesis,
;http://hdl.handle.net/1951/52345, Stony Brook University PhD Thesis Database
;Wang and Geller (2003): Morphology of gravity-wave energy as observed from 4 years (1998–2001) of high vertical resolution U.S. radiosonde data, J. G. R., https://doi.org/10.1029/2002JD002786.
;Allen, S., and R. A. Vincent, Gravity wave activity in the lower atmosphere: Seasonal and latitudinal variations, J. Geophys. Res., 100, 1327–1350, 1995.
;Eckermann, S. D., Hodographic analysis of gravity waves: Relationships among Stokes parameters, rotary spectra, and cross-spectral methods, J. Geophys. Res., 101, 19,169–19,174, 1996.

@a2_eclipse.pro
@hilbert.pro

; function declaration, debug flag for printing values if set
pro runpro, debug = flag
; working directory setup
cd, '..'
;getting current working directory
CD, Current=working_directory

;debug printing current working directory
if keyword_set(flag) then begin
  Print, working_directory
endif
;end of debug

; initialize variables
datapath=working_directory
station=['Tolten','Villarrica']
stationname = station[0]
datapath=datapath+'profile/'
newline = ' ' + string(10b)

infile=findfile('profile/*.txt')
nf=n_elements(infile)

outputfile='data/outfile.txt'

zseg=[1.98,30.]*1.E+3 ;original input height segment. Will be separated to stratosphere and troposphere later
dz=15.
ipoly=3 ;fixed 3rd polynomial fitting


; getting latitude value from file
;error handler
catch, error_status
if error_status NE 0 then begin
  openw,30,outputfile
  if keyword_set(flag) then begin
    print, 'Error message: no latitude found'
  endif
  zero_string = 0
  printf,30,newline,'troposphere'
  for I = 0,12 do begin
    printf,30,zero_string
  endfor
  printf,30,newline,'stratosphere'
  for J = 0,12 do begin
    printf,30,zero_string
  endfor
  close,/ALL
  catch,/CANCEL
  return
endif
;opening input file
openr,1,infile
;initializing variables
lat_line = ''
rawLine = ''
loop_flag = 0
;getting line containing the latitude value
while not EOF(1) do begin
  ;reading input file
  readf,1,rawLine
  ;splitting line into readable values
  line = strsplit(rawLine, /EXTRACT)
  foreach value, line do begin
    ;determining if the line has a latitude value in ti
    if (value eq 'Latitude:') then begin
      loop_flag = 1
      break
    endif
  endforeach
  if (loop_flag eq 1) then begin
    ;breaking out of the loop once the line has been found
    lat_line = line
    break
  endif
endwhile
;closing input file
close,1
;getting the latitude value out of the line
line_size = n_elements(lat_line)
for i = 0,line_size-1 do begin
  if (lat_line[i] eq 'Latitude:') then break
endfor
lat_value = fix(lat_line[i+1], TYPE=4)
;setting latitude value
lat_station = lat_value

; opening file
openw,28,outputfile

; start of stuff to do
for kf=0,nf-1 do begin
 profilename=strmid(infile[kf],strlen(datapath),13)
 gw_eclipse_complete,infile[kf],zseg[0],zseg[1],3,dz,lat_station,$
	gw=gw,npoly=ipoly ;don't take gw parameters from here. This step is to get mean T profile for determining tropopause
 if gw.outputflag NE 0 then goto,next_profile
 Tmean=gw.input.tm
 zz=gw.input.z
 iz=where(Tmean EQ min(Tmean))
 z_tropo=zz(iz)
 np=(z_tropo-1.5-1.98)*1.E+3/dz
 if np LT 0 then begin
	 print,'tropopause height wrong, stop processing'
	 goto,next_profile
 endif
 if round(np) EQ np then zsegTropo=[1.98,z_tropo-1.5]*1.E+3 else $
	 zsegTropo=[1.98,1.98+dz/1.E+3*floor(np)]*1.E+3

 np=(30.-z_tropo-1.5)*1.E+3/dz
 if np LT 0 then begin
	 print,'tropopause height wrong, stop processing'
	 goto,next_profile
 endif
 if round(np) EQ np then zsegStrato=[z_tropo+1.5,30.]*1.E+3 else $
	zsegStrato=[30.-dz/1.E+3*floor(np),30.]*1.E+3


  gw_eclipse_complete,infile[kf],zsegTropo[0],zsegTropo[1],3,dz,lat_station,$
	gw=gw_tropo,npoly=ipoly
  gw_eclipse_complete,infile[kf],zsegStrato[0],zsegStrato[1],3,dz,lat_station,$
	gw=gw_strato,npoly=ipoly

; data time

  ;debug printing
  if keyword_set(flag) then begin
    print,infile[kf]
    print,newline
  endif
  ;end of debug
  
; troposphere data
  gw=gw_tropo
  
  ;debug printing
  if keyword_set(flag) then begin
    print,'troposphere',newline
    print,'Zbot (km): ',zsegtropo[0]/1.E+3,newline
    print,'Ztop (km): ',zsegtropo[1]/1.E+3,newline
    print,'horizontal wavelength (km): ',gw.lh,newline
    print,'vertical wavelength (km): ',gw.lz,newline
    print,'mean phase propagation direction (deg): ',gw.mean_dir,newline
    print,'upward propagation fraction: ',gw.up_frac*100,newline
    print,'zonal momentum flux (m2/s2): ',gw.uw,newline
    print,'meridional momentum flux (m2/s2): ',gw.vw,newline
    print,'potential energy (J/kg): ',gw.pe,newline
    print,'kenetic energy (J/kg): ',gw.ke,newline
    print,'intrinsic frequency (s^-1): ',gw.omega,newline
    print,'output flag: ',gw.outputflag,newline
    print,'Coriolis parameter: ',gw.f_w,newline
    print,newline
  endif
  ;end of debug
  
  printf,28,newline,'troposphere'
  printf,28,zsegtropo[0]/1.E+3
  printf,28,zsegtropo[1]/1.E+3
  printf,28,gw.lh
  printf,28,gw.lz
  printf,28,gw.mean_dir
  printf,28,gw.up_frac*100
  printf,28,gw.uw
  printf,28,gw.vw
  printf,28,gw.pe
  printf,28,gw.ke
  printf,28,gw.omega
  printf,28,gw.outputflag
  printf,28,gw.f_w




; stratosphere data
  gw=gw_strato
  
  ;debug printing
  if keyword_set(flag) then begin
    print,'stratosphere',newline
    print,'Zbot (km): ',zsegstrato[0]/1.E+3,newline
    print,'Ztop (km): ',zsegstrato[1]/1.E+3,newline
    print,'horizontal wavelength (km): ',gw.lh,newline
    print,'vertical wavelength (km): ',gw.lz,newline
    print,'mean phase propagation direction (deg): ',gw.mean_dir,newline
    print,'upward propagation fraction: ',gw.up_frac*100,newline
    print,'zonal momentum flux (m2/s2): ',gw.uw,newline
    print,'meridional momentum flux (m2/s2): ',gw.vw,newline
    print,'potential energy (J/kg): ',gw.pe,newline
    print,'kenetic energy (J/kg): ',gw.ke,newline
    print,'intrinsic frequency (s^-1): ',gw.omega,newline
    print,'output flag: ',gw.outputflag,newline
    print,'Coriolis parameter: ',gw.f_w,newline
    print,newline
  endif
  ;end of debug
  
  printf,28,newline,'stratosphere'
  printf,28,zsegstrato[0]/1.E+3
  printf,28,zsegstrato[1]/1.E+3
  printf,28,gw.lh
  printf,28,gw.lz
  printf,28,gw.mean_dir
  printf,28,gw.up_frac*100
  printf,28,gw.uw
  printf,28,gw.vw
  printf,28,gw.pe
  printf,28,gw.ke
  printf,28,gw.omega
  printf,28,gw.outputflag
  printf,28,gw.f_w

  goto,next_profile

next_profile:
endfor ;kf
; resetting working directory
  cd, 'pro'
; closing all files
  close,/ALL  
END
end
